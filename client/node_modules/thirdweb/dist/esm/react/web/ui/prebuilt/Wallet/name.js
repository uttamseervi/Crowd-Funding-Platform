"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { getFunctionId } from "../../../../../utils/function-id.js";
import { getWalletInfo } from "../../../../../wallets/__generated__/getWalletInfo.js";
import { useWalletContext } from "./provider.js";
/**
 * This component fetches then shows the name of a wallet.
 * It inherits all the attributes of a HTML <span> component, hence you can style it just like how you would style a normal <span>
 *
 * @example
 * ### Basic usage
 * ```tsx
 * import { WalletProvider, WalletName } from "thirdweb/react";
 *
 * <WalletProvider id="io.metamask">
 *   <WalletName  />
 * </WalletProvider>
 * ```
 * Result:
 * ```html
 * <span>MetaMask</span>
 * ```
 *
 * ### Show a loading sign when the name is being fetched
 * ```tsx
 * import { WalletProvider, WalletName } from "thirdweb/react";
 *
 * <WalletProvider {...props}>
 *   <WalletName loadingComponent={<Spinner />} />
 * </WalletProvider>
 * ```
 *
 * ### Fallback to something when the name fails to resolve
 * ```tsx
 * <WalletProvider {...props}>
 *   <WalletName fallbackComponent={<span>Failed to load</span>} />
 * </WalletProvider>
 * ```
 *
 * ### Custom query options for useQuery
 * This component uses `@tanstack-query`'s useQuery internally.
 * You can use the `queryOptions` prop for more fine-grained control
 * ```tsx
 * <WalletName
 *   queryOptions={{
 *     enabled: isEnabled,
 *     retry: 4,
 *   }}
 * />
 * @component
 * @beta
 * @wallet
 */
export function WalletName({ loadingComponent, fallbackComponent, queryOptions, formatFn, ...restProps }) {
    const nameQuery = useWalletName({ queryOptions, formatFn });
    if (nameQuery.isLoading) {
        return loadingComponent || null;
    }
    if (!nameQuery.data) {
        return fallbackComponent || null;
    }
    return _jsx("span", { ...restProps, children: nameQuery.data });
}
/**
 * @internal
 */
function useWalletName(props) {
    const { id } = useWalletContext();
    const nameQuery = useQuery({
        queryKey: getQueryKeys({ id, formatFn: props.formatFn }),
        queryFn: async () => fetchWalletName({ id, formatFn: props.formatFn }),
        ...props.queryOptions,
    });
    return nameQuery;
}
/**
 * @internal Exported for tests only
 */
export function getQueryKeys(props) {
    if (typeof props.formatFn === "function") {
        return [
            "walletName",
            props.id,
            { resolver: getFunctionId(props.formatFn) },
        ];
    }
    return ["walletName", props.id];
}
/**
 * @internal Exported for tests only
 */
export async function fetchWalletName(props) {
    const info = await getWalletInfo(props.id);
    if (typeof props.formatFn === "function") {
        return props.formatFn(info.name);
    }
    return info.name;
}
//# sourceMappingURL=name.js.map